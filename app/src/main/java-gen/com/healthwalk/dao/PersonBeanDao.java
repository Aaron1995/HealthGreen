package com.healthwalk.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.healthwalk.bean.PersonBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table person.
*/
public class PersonBeanDao extends AbstractDao<PersonBean, Long> {

    public static final String TABLENAME = "person";

    /**
     * Properties of entity PersonBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property User_id = new Property(1, Integer.class, "user_id", false, "USER_ID");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Time_begin = new Property(3, String.class, "time_begin", false, "TIME_BEGIN");
        public final static Property Time_end = new Property(4, String.class, "time_end", false, "TIME_END");
        public final static Property Route = new Property(5, String.class, "route", false, "ROUTE");
        public final static Property Road = new Property(6, String.class, "road", false, "ROAD");
        public final static Property Free = new Property(7, String.class, "free", false, "FREE");
        public final static Property Inhale = new Property(8, String.class, "inhale", false, "INHALE");
        public final static Property Stay = new Property(9, String.class, "stay", false, "STAY");
    };


    public PersonBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PersonBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'person' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' INTEGER," + // 1: user_id
                "'DATE' TEXT," + // 2: date
                "'TIME_BEGIN' TEXT," + // 3: time_begin
                "'TIME_END' TEXT," + // 4: time_end
                "'ROUTE' TEXT," + // 5: route
                "'ROAD' TEXT," + // 6: road
                "'FREE' TEXT," + // 7: free
                "'INHALE' TEXT," + // 8: inhale
                "'STAY' TEXT);"); // 9: stay
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_person_ID ON person" +
                " (ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'person'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PersonBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String time_begin = entity.getTime_begin();
        if (time_begin != null) {
            stmt.bindString(4, time_begin);
        }
 
        String time_end = entity.getTime_end();
        if (time_end != null) {
            stmt.bindString(5, time_end);
        }
 
        String route = entity.getRoute();
        if (route != null) {
            stmt.bindString(6, route);
        }
 
        String road = entity.getRoad();
        if (road != null) {
            stmt.bindString(7, road);
        }
 
        String free = entity.getFree();
        if (free != null) {
            stmt.bindString(8, free);
        }
 
        String inhale = entity.getInhale();
        if (inhale != null) {
            stmt.bindString(9, inhale);
        }
 
        String stay = entity.getStay();
        if (stay != null) {
            stmt.bindString(10, stay);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PersonBean readEntity(Cursor cursor, int offset) {
        PersonBean entity = new PersonBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time_begin
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time_end
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // route
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // road
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // free
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // inhale
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // stay
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PersonBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime_begin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime_end(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRoute(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRoad(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFree(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInhale(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStay(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PersonBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PersonBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
